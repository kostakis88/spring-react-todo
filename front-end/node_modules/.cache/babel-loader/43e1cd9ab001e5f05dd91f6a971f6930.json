{"ast":null,"code":"var _jsxFileName = \"/home/kostas/Projects/spring-react-todo/front-end/src/components/ToDo.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../api/TodoDataService';\nimport Authentication from './Authentication';\n\nclass Todo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: this.props.match.params.id,\n      description: '',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n\n    this.handleSubmit = values => {\n      let username = Authentication.getLoggedInUsername();\n      const {\n        id\n      } = this.state;\n      TodoDataService.updateTodo(username, id, {\n        id: id,\n        description: values.description,\n        targetDate: values.targetDate\n      }).then(() => this.props.history.push('/todos'));\n    };\n\n    this.handleValidation = values => {\n      let errors = {};\n\n      if (!values.description) {\n        errors.description = \"Enter a Description\";\n      } else if (values.description.length < 5) {\n        errors.description = \"Enter atleast 5 Characters in Description\";\n      }\n\n      if (!moment(values.targetDate).isValid()) {\n        errors.targetDate = \"Enter a valid date\";\n      }\n\n      return errors;\n    };\n  }\n\n  componentDidMount() {\n    let username = Authentication.getLoggedInUsername();\n    const {\n      id\n    } = this.state;\n    TodoDataService.retrieveTodo(username, id).then(response => {\n      this.setState({\n        description: response.data.description,\n        targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n      });\n    });\n  }\n\n  render() {\n    const {\n      description,\n      targetDate\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, \"Todo\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        description,\n        targetDate\n      },\n      onSubmit: this.handleSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.handleValidation,\n      enableReinitialize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, props => /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"targetDate\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, \"Target Date\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"form-control\",\n      type: \"date\",\n      name: \"targetDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, \"Save\")))));\n  }\n\n}\n\nexport default Todo;","map":{"version":3,"sources":["/home/kostas/Projects/spring-react-todo/front-end/src/components/ToDo.js"],"names":["React","Component","moment","Formik","Form","Field","ErrorMessage","TodoDataService","Authentication","Todo","state","id","props","match","params","description","targetDate","Date","format","handleSubmit","values","username","getLoggedInUsername","updateTodo","then","history","push","handleValidation","errors","length","isValid","componentDidMount","retrieveTodo","response","setState","data","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../api/TodoDataService';\nimport Authentication from './Authentication';\n\nclass Todo extends Component {\n  \n  state = {\n    id: this.props.match.params.id,\n    description: '',\n    targetDate: moment(new Date()).format('YYYY-MM-DD')\n  }\n\n  componentDidMount() {\n    let username = Authentication.getLoggedInUsername();\n    const {id} = this.state;\n    TodoDataService.retrieveTodo(username, id)\n      .then(response => {\n        this.setState({\n          description: response.data.description,\n          targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n        });\n      })\n  }\n\n  handleSubmit = (values) => {\n    let username = Authentication.getLoggedInUsername();\n    const {id} = this.state;\n    TodoDataService.updateTodo(username, id, {\n      id: id,\n      description: values.description,\n      targetDate: values.targetDate\n    }).then(() => this.props.history.push('/todos'));\n  }\n\n  handleValidation = (values) => {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a Description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter atleast 5 Characters in Description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid date\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    const {description, targetDate} = this.state;\n    return (\n      <div>\n        <h1>Todo</h1>\n        <div className=\"container\">\n          <Formik initialValues={{description, targetDate}} \n                  onSubmit={this.handleSubmit}\n                  validateOnChange={false}\n                  validateOnBlur={false}\n                  validate={this.handleValidation}\n                  enableReinitialize={true}\n          >\n            {(props) => (\n              <Form>\n                <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\"/>\n                <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\"/>\n                <fieldset className=\"form-group\">\n                  <label>Description</label>\n                  <Field className=\"form-control\" type=\"text\" name=\"description\"/>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <label>Target Date</label>\n                  <Field className=\"form-control\" type=\"date\" name=\"targetDate\"/>\n                </fieldset>\n                <button className=\"btn btn-success\" type=\"submit\">Save</button>\n              </Form>\n              )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;"]},"metadata":{},"sourceType":"module"}